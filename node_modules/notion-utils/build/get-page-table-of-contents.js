"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_text_content_1 = require("./get-text-content");
const indentLevels = {
    header: 0,
    sub_header: 1,
    sub_sub_header: 2
};
/**
 * Gets the metadata for a table of contents block by parsing the page's
 * H1, H2, and H3 elements.
 */
exports.getPageTableOfContents = (page, recordMap) => {
    var _a;
    const toc = (_a = page.content) === null || _a === void 0 ? void 0 : _a.map((blockId) => {
        var _a, _b;
        const block = (_a = recordMap.block[blockId]) === null || _a === void 0 ? void 0 : _a.value;
        if (block) {
            const { type } = block;
            if (type === 'header' ||
                type === 'sub_header' ||
                type === 'sub_sub_header') {
                return {
                    id: blockId,
                    type,
                    text: get_text_content_1.getTextContent((_b = block.properties) === null || _b === void 0 ? void 0 : _b.title),
                    indentLevel: indentLevels[type]
                };
            }
        }
        return null;
    }).filter(Boolean);
    const indentLevelStack = [
        {
            actual: -1,
            effective: -1
        }
    ];
    // Adjust indent levels to always change smoothly.
    // This is a little tricky, but the key is that when increasing indent levels,
    // they should never jump more than one at a time.
    for (const tocItem of toc) {
        const { indentLevel } = tocItem;
        let actual = indentLevel;
        do {
            const prevIndent = indentLevelStack[indentLevelStack.length - 1];
            const { actual: prevActual, effective: prevEffective } = prevIndent;
            if (actual > prevActual) {
                tocItem.indentLevel = prevEffective + 1;
                indentLevelStack.push({
                    actual,
                    effective: tocItem.indentLevel
                });
            }
            else if (actual === prevActual) {
                tocItem.indentLevel = prevEffective;
                break;
            }
            else {
                indentLevelStack.pop();
            }
        } while (true);
    }
    return toc;
};
//# sourceMappingURL=get-page-table-of-contents.js.map