import * as notion from 'notion-types';
import * as types from './types';
export declare class NotionAPI {
    private readonly _apiBaseUrl;
    private readonly _authToken?;
    private readonly _userLocale;
    private readonly _userTimeZone;
    constructor({ apiBaseUrl, authToken, userLocale, userTimeZone }?: {
        apiBaseUrl?: string;
        authToken?: string;
        userLocale?: string;
        userTimeZone?: string;
    });
    getPage(pageId: string, { concurrency, fetchCollections, signFileUrls }?: {
        concurrency?: number;
        fetchCollections?: boolean;
        signFileUrls?: boolean;
    }): Promise<notion.ExtendedRecordMap>;
    getPageRaw(pageId: string): Promise<notion.PageChunk>;
    getCollectionData(collectionId: string, collectionViewId: string, { type, query, groups, limit, searchQuery, userTimeZone, userLocale, loadContentCover }?: {
        type?: notion.CollectionViewType;
        query?: any;
        groups?: any;
        limit?: number;
        searchQuery?: string;
        userTimeZone?: string;
        userLocale?: string;
        loadContentCover?: boolean;
    }): Promise<notion.CollectionInstance>;
    getUsers(userIds: string[]): Promise<notion.RecordValues<notion.User>>;
    getBlocks(blockIds: string[]): Promise<notion.PageChunk>;
    getSignedFileUrls(urls: types.SignedUrlRequest[]): Promise<types.SignedUrlResponse>;
    search(params: notion.SearchParams): Promise<notion.SearchResults>;
    fetch<T>({ endpoint, body }: {
        endpoint: string;
        body: object;
    }): Promise<T>;
}
